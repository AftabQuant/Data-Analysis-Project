select products.product_category, round(((round(sum(payments.payment_value),2))/(select sum(payments.payment_value) from payments) * 100),2)
from products join order_items
on products.product_id= order_items.product_id
join payments
on order_items.order_id = payments.order_id
group by products.product_category;


--  4. Identify the correlation between product price and the number of times a product has been purchased.
select products.product_category, count(order_items.product_id), round(avg(order_items.price))
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category;


-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
select  * , dense_rank() over(order by revenue desc) as rn from 
(select order_items.seller_id, round(sum( payments.payment_value),2) revenue
from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id) as a;

--  Calculate the moving average of order values for each customer over their order history. 
select customer_id, order_purchase_timestamp, avg(pay)
over (partition by customer_id order by order_purchase_timestamp rows
between 2 preceding and current row) as moving_avg
from 
(select orders.customer_id, orders.order_purchase_timestamp, payments.payment_value as pay
from orders join payments
on orders.order_id = payments.order_id) as a;

-- 2. Calculate the cumulative sales per month for each year.
select years, months, sum(total_payment)
over(order by years, months) pay from
(select year(orders.order_purchase_timestamp) as years,
monthname(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) total_payment
from orders join payments
on orders.order_id = payments.order_id
group by years, months) as a
order by years asc;

-- 3. Calculate the year-over-year growth rate of total sales.
with a as (select year(orders.order_purchase_timestamp) as years, round(sum(payments.payment_value),2) as pay
from orders join payments
on orders.order_id = payments.order_id
group by years)
select years, pay, round(((pay - lag(pay, 1) over(order by years)) / lag(pay, 1) over(order by years)) * 100,2) from a;